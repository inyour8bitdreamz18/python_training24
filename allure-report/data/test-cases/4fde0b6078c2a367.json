{"uid":"4fde0b6078c2a367","name":"test_group_list","fullName":"test.test_db_matches_ui#test_group_list","historyId":"d4b447882ae6fe5227f61499ba550360","time":{"start":1731432480040,"stop":1731432481202,"duration":1162},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"app = <fixture.application.Application object at 0x000001D00890EFF0>\ndb = <fixture.db.DbFixture object at 0x000001D008958BF0>\n\n    def test_group_list(app, db):\n        # Timeit будет вызываться много раз, нам достаточно 1 - посчитаем время запроса из UI\n        print(timeit(lambda: app.group.get_group_list(), number=1))\n        #ui_list = app.group.get_group_list()\n        def clean(group):\n            return Group(id=group.id, name=group.name.strip())\n        # Посчитали время на 1000 запросов из БД\n        print(timeit(lambda: map(clean, db.get_group_list()), number=1000))\n        #db_list = map(clean, db.get_group_list())\n>       assert False #sorted(ui_list, key=Group.id_or_max) == sorted(db_list, key=Group.id_or_max)\nE       assert False\n\ntest\\test_db_matches_ui.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"stop","time":{"start":1731432458694,"stop":1731432458694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db","time":{"start":1731432458695,"stop":1731432458703,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"app","time":{"start":1731432479095,"stop":1731432480040,"duration":945},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"app = <fixture.application.Application object at 0x000001D00890EFF0>\ndb = <fixture.db.DbFixture object at 0x000001D008958BF0>\n\n    def test_group_list(app, db):\n        # Timeit будет вызываться много раз, нам достаточно 1 - посчитаем время запроса из UI\n        print(timeit(lambda: app.group.get_group_list(), number=1))\n        #ui_list = app.group.get_group_list()\n        def clean(group):\n            return Group(id=group.id, name=group.name.strip())\n        # Посчитали время на 1000 запросов из БД\n        print(timeit(lambda: map(clean, db.get_group_list()), number=1000))\n        #db_list = map(clean, db.get_group_list())\n>       assert False #sorted(ui_list, key=Group.id_or_max) == sorted(db_list, key=Group.id_or_max)\nE       assert False\n\ntest\\test_db_matches_ui.py:13: AssertionError","steps":[],"attachments":[{"uid":"c7dc1bd49db38584","name":"stdout","source":"c7dc1bd49db38584.txt","type":"text/plain","size":38}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"db::fin","time":{"start":1731432493720,"stop":1731432493720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"stop::fin","time":{"start":1731432493721,"stop":1731432494746,"duration":1025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_db_matches_ui"},{"name":"host","value":"LAPTOP-R1K1EE83"},{"name":"thread","value":"28644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_db_matches_ui"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4fde0b6078c2a367.json","parameterValues":[]}