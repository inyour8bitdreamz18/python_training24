{"name": "test_group_list", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "app = <fixture.application.Application object at 0x000001D00890EFF0>\ndb = <fixture.db.DbFixture object at 0x000001D008958BF0>\n\n    def test_group_list(app, db):\n        # Timeit будет вызываться много раз, нам достаточно 1 - посчитаем время запроса из UI\n        print(timeit(lambda: app.group.get_group_list(), number=1))\n        #ui_list = app.group.get_group_list()\n        def clean(group):\n            return Group(id=group.id, name=group.name.strip())\n        # Посчитали время на 1000 запросов из БД\n        print(timeit(lambda: map(clean, db.get_group_list()), number=1000))\n        #db_list = map(clean, db.get_group_list())\n>       assert False #sorted(ui_list, key=Group.id_or_max) == sorted(db_list, key=Group.id_or_max)\nE       assert False\n\ntest\\test_db_matches_ui.py:13: AssertionError"}, "attachments": [{"name": "stdout", "source": "7cf194e1-cd71-47b2-8b82-dd3704c8a9c0-attachment.txt", "type": "text/plain"}], "start": 1731432480040, "stop": 1731432481202, "uuid": "244cdbc3-2d29-4e8f-8974-732ddd50e4f8", "historyId": "d4b447882ae6fe5227f61499ba550360", "testCaseId": "d4b447882ae6fe5227f61499ba550360", "fullName": "test.test_db_matches_ui#test_group_list", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_db_matches_ui"}, {"name": "host", "value": "LAPTOP-R1K1EE83"}, {"name": "thread", "value": "28644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_db_matches_ui"}]}